
PI :: 3.14159265358979323846264338327950288419716939937510582097494459

E :: 2.71828182845904523536028747135266249775724709369995957496696763

pow :: fn(base, exponent) {
  # assert to guarantee the types or args
  if exponent == 0 {
    return 1
  }
  if exponent == 1 {
    return base
  }
  if exponent < 0 {
    # casting currently is needed here to insure proper stuff
    return cast(1, FLOAT) / cast(pow(base, -exponent), FLOAT)
  }

  result := 1
  exp := exponent
  while exp > 0 {
    if exp % 2 == 1 {
      result *= base
    }
    base *= base
    exp /= 2
  }
  return result
}

min :: fn(a,b) {
  if a < b {
    a
  } else {
    b
  }
}

max :: fn(a,b) {
  if a > b {
    a
  } else {
    b
  }
}

abs :: fn(a) {
  if a > 0 {
    return a
  }
  return -a
}